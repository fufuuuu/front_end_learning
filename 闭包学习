// //闭包：当内部函数被保存到外部时，将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄漏。

// function a() {
// 	var num = 100;
// 	function b() {
// 		num ++;
// 		console.log(num);
// 	}
// 	return b;
// //在执行return返回值时，b中的作用域将会保留到a中作用域的链
// }

// var demo = a();
// demo();
// demo();

// function test() {
// 	var num = 100;
// 	function a () {
// 		num ++;
// 		console.log(num);
// 	}

// 	function b() {
// 		num --;
// 		console.log(num);

// 	}
// 	return [a,b]
// }
// var myArr = test();
// myArr[0]();
// myArr[1]();

// //立即执行函数
// //针对初始化功能的函数
// (function (a,b,c) {
// 	console.log(a + b + c);
// }(1,2,3))

//(function (){}());
//只有表达式才能被执行符号执行
/* 
function test1() {
	var a = 123;
}()
这个是函数声明所以会报错
*/
// var test2 = function() {
// 	console.log('只有表达式才能被执行符号执行');
// }()

// + function test1() {
// 	console.log('加上运算符后变为表达式');
// }()


// (function () {
// 	console.log('立即执行函数.');
// }())

// function test3(a, b, c, d) {
// 	console.log(a + b + c + d);
// }(1, 2, 3, 4);
// //执行结果不报错，也没有输出结果。

//A thought-provoking example 
function test4() {
	var arr = [];
	for(var i = 0; i < 10; i ++) {
		arr[i] = function () {
			console.log(i);
		}
	}
	return arr;
}

var myArr = test4();
for(var j = 0; j < 10; j ++){
	myArr[j]();  
}
